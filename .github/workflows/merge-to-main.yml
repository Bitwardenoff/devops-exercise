name: Docker publish and tag

on:
  pull_request:
    branches:
    - main
    types: [closed]

jobs:
  build-image:
    if: github.event.pull_request.merged == true
    name: Build Docker Image
    runs-on: ubuntu-22.04
    env:
      VERSION: ${ github.ref_name#refs/tags/ }

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --deploy
        pipenv install --dev --deploy

    - name: Get major version num from version.json
      run: |
        echo 'VERSION_JSON<<EOF' >> $GITHUB_ENV
        cat ./package.json >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        MINOR_VERSION=${env.VERSION%.*}
        MAJOR_VERSION=${env.MINOR_VERSION%.*}
        PATCH_VERSION=${{env.MINOR_VERSION != env.VERSION_JSON && '0' || $(env.VERSION##*.) + 1}}
        NEW_VERSION=${{ join('[fromJson(env.VERSION_JSON).baseVersion, env.PATCH_VERSION]', '.') }}
        IMAGE_NAME=bw-devops-exercise:${env.NEW_VERSION}
    
    # - name: get-version
    #   id: get-version
    #   run: |
    #     BASE_VERSION=$(jq .baseVersion version.json)
    #     echo "BASE_VERSION=${BASE_VERSION}" >> $GITHUB_ENV
    #     VERSION=$(jq .version package.json)
    #     echo "${VERSION}"
    #     echo "VERSION=${VERSION}" >> $GITHUB_ENV
    #     echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT  

    # - name: Parse semver string
    #   id: semver_parser
    #   uses: booxmedialtd/ws-action-parse-semver@v1
    #   with:
    #     input_string: ${{ steps.get-version.outputs.version }}

    # - name: Generate version numbers
    #   run: |
    #     MINOR_VERSION="${{ steps.semver_parser.outputs.minor}}"
    #     MAJOR_VERSION=${{ steps.semver_parser.outputs.major}}
    #     CURRENT_PATCH_VERSION=${{ steps.semver_parser.outputs.patch}} + 1
    #     PATCH_VERSION=${{ env.MINOR_VERSION != env.VERSION && '0' || env.CURRENT_PATCH_VERSION }}
    #     NEW_VERSION=${{ join('env.VERSION, env.PATCH_VERSION]', '.') }}
    #     IMAGE_NAME=bw-devops-exercise:${env.NEW_VERSION}    

    - name: Build Docker Image
      run: |
        docker -t ${ env.IMAGE_NAME } .

    - name: Push Docker Image to image repo
      run: |
        docker push ghcr.io/JoseVillarreal/${ env.IMAGE_NAME }

    - name: Create Github Tag
      run: |
        git tag ${env.NEW_VERSION}

    - name: Update docker image tag
      run: |
        docker tag ${env.NEW_VERSION} JoseVillarreal/bw-devops-exercise:latest 

    - name: Create Github Release
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        tag: ${{ env.NEW_VERSION }}
      run: |
        gh release create "$tag" \
          --repo="${github.ref_name}" \
          --title="${github.ref_name} ${tag#v}" \
          --notes="Releasing ${env.NEW_VERSION}" \
          --generate-notes
    
    - name: Update version in version.json & package.json
      run: |
        jq --arg NEW_VERSION env.NEW_VERSION '.version="$NEW_VERSION"' version.json
        jq --arg NEW_VERSION env.NEW_VERSION '.version="$NEW_VERSION"' package.json
      